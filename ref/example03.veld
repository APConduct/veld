struct Vector2
    x: f64,
    y: f64,
impl
    fn new() = Vector2(x: 0.0, y: 0.0)
    fn new(x: f64, y: f64) Vector2(x: x, y: y);  # Params can differ from fields

    # Other constructors same as before
    fn from_angle(theta: f64) Vector2(
        x: theta.cos(),
        y: theta.sin()
    )
end

let v1 = Vector2(x: 1.0, y: 2.0)    # Direct needs names (required when using struct-name-syntax)
let v2 = Vector2.new()               # Empty is fine
let v3 = Vector2.new(1.0, 2.0)      # new() can use positional!
let v4 = Vector2.from_angle(0.5)     # Other constructors are free

struct Point
    x: f64,
    y: f64,
    z: f64,

    fn new(x: f64, y: f64, z: f64) = Point(x, y, z),  # Parentheses for struct creation
    fn dist(self) (self.x * self.x + self.y * self.y + self.z * self.z).sqrt() end,
end

impl Point
    fn scale(self, f: f64)
        Point(
            x: self.x * f,
            y: self.y * f,
            z: self.z * f
        )
    end,
    fn normalize(self) self.scale(1.0 / self.dist()) end,
end

# Table example
let config = {
    host: "localhost",
    port: 8080
}

# Code generation
@comptime
fn derive_debug(type_name)
    let type_info = @reflect(type_name);
    # Generate Debug implementation
end

# Custom DSL
sql~{
    SELECT users.name, users.email
    FROM users
    WHERE users.active = true
    ORDER BY users.name
}
