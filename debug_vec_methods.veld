# Test which Vec methods are available to understand the trait implementation issue

fn main()
    std.io.println("=== Testing Vec Method Availability ===")

    # Test 1: Create a Vec<i32>
    std.io.println("\n--- Test 1: Creating Vec<i32> ---")
    var vec: Vec<i32> = std.vec.Vec.new()
    std.io.println("Vec<i32> created successfully")

    # Test 2: Try len() method (from Sequence<T> trait)
    std.io.println("\n--- Test 2: Testing len() method ---")
    let length = vec.len()
    std.io.println("Vec length: " + length.to_string())

    # Test 3: Try is_empty() method (from Sequence<T> trait)
    std.io.println("\n--- Test 3: Testing is_empty() method ---")
    let empty = vec.is_empty()
    std.io.println("Vec is empty: " + empty.to_string())

    # Test 4: Try get() method (from Sequence<T> trait)
    std.io.println("\n--- Test 4: Testing get() method ---")
    let maybe_first = vec.get(0)
    std.io.println("Got element (should be None)")

    # Test 5: Now try push() method (from GrowableSequence<T> trait) - this might fail
    std.io.println("\n--- Test 5: Testing push() method (might fail) ---")
    vec.push(42)
    std.io.println("Push successful!")

    # Test 6: Check length after push
    std.io.println("\n--- Test 6: Length after push ---")
    let new_length = vec.len()
    std.io.println("New length: " + new_length.to_string())

    std.io.println("\nâœ… All Vec method tests completed!")
end

main()
