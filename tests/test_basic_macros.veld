# Basic macro functionality test for Veld
# Tests core macro behaviors without relying on complex to_string implementations



fn test_vec_macro()
    std.io.println("=== Testing vec~ macro ===")

    # Test empty vec
    let empty = vec~()
    std.io.println("Empty vec created successfully")

    # Test vec with single element
    let single = vec~(42)
    std.io.println("Single element vec created successfully")

    # Test vec with multiple elements
    let numbers = vec~(1, 2, 3, 4, 5)
    std.io.println("Multiple element vec created successfully")

    std.io.println("vec~ macro tests completed")
end

fn test_format_macro()
    std.io.println("=== Testing format~ macro ===")

    # Test basic format with string
    let name = "Alice"
    let greeting = format~("Hello, {}!", name)
    std.io.println(greeting)

    # Test format with number
    let age = 25
    let age_msg = format~("Age: {}", age)
    std.io.println(age_msg)

    # Test format with boolean
    let is_active = true
    let status_msg = format~("Active: {}", is_active)
    std.io.println(status_msg)

    # Test format with multiple arguments
    let full_msg = format~("Name: {}, Age: {}, Active: {}", name, age, is_active)
    std.io.println(full_msg)

    # Test format with no placeholders
    let no_placeholders = format~("No placeholders here")
    std.io.println(no_placeholders)

    std.io.println("format~ macro tests completed")
end

fn test_println_macro()
    std.io.println("=== Testing println~ macro ===")

    # Test basic println
    println~("This is a println macro test")

    # Test println with string variable
    let message = "Hello from variable"
    println~(message)

    # Test println with number
    println~("The answer is 42")

    std.io.println("println~ macro tests completed")
end

fn test_debug_macro()
    std.io.println("=== Testing debug~ macro ===")

    # Test debug with simple value
    let x = 42
    debug~(x)

    # Test debug with string
    let text = "debug this"
    debug~(text)

    # Test debug with boolean
    let flag = false
    debug~(flag)

    std.io.println("debug~ macro tests completed")
end

fn test_assert_macro()
    std.io.println("=== Testing assert~ macro ===")

    # Test basic assertions that should pass
    assert~(true)
    assert~(5 > 3)
    assert~(2 + 2 == 4)

    # Test assertion with variables
    let x = 10
    let y = 20
    assert~(x < y)

    std.io.println("assert~ macro tests completed")
end

fn test_to_string_functionality()
    std.io.println("=== Testing to_string with different types ===")

    # Test string to_string (identity)
    let str_val = "hello"
    let str_result = str_val.to_string()
    std.io.println("String to_string: " + str_result)

    # Test integer to_string
    let int_val = 42
    let int_result = int_val.to_string()
    std.io.println("Integer to_string: " + int_result)

    # Test boolean to_string
    let bool_val = true
    let bool_result = bool_val.to_string()
    std.io.println("Boolean to_string: " + bool_result)

    # Test float to_string
    let float_val = 3.14
    let float_result = float_val.to_string()
    std.io.println("Float to_string: " + float_result)

    std.io.println("to_string functionality tests completed")
end

fn test_nested_macro_usage()
    std.io.println("=== Testing nested macro usage ===")

    # Test println with format macro
    println~(format~("Nested: {}", "macros work"))

    # Test debug with expressions
    debug~(10 + 5)

    # Test format with to_string calls
    let number = 100
    let formatted = format~("Number as string: {}", number)
    std.io.println(formatted)

    std.io.println("Nested macro usage tests completed")
end

fn main()
    std.io.println("Starting basic macro functionality tests")
    std.io.println("==========================================")

    test_vec_macro()
    test_format_macro()
    test_println_macro()
    test_debug_macro()
    test_assert_macro()
    test_to_string_functionality()
    test_nested_macro_usage()

    std.io.println("==========================================")
    std.io.println("✅ All basic macro tests passed!")
    std.io.println("✅ vec~ macro: Creates arrays correctly")
    std.io.println("✅ format~ macro: String interpolation works")
    std.io.println("✅ println~ macro: Output works correctly")
    std.io.println("✅ debug~ macro: Debug output functional")
    std.io.println("✅ assert~ macro: Assertions work")
    std.io.println("✅ to_string: All basic types convert correctly")
    std.io.println("✅ Nested usage: Macros compose properly")
    std.io.println("")
    std.io.println("🎉 The Veld macro system is working correctly!")
end

main()
