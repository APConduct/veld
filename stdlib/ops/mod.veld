#| Standard operators module for Veld

# Binary arithmetic operators
pub kind Add<Rhs, Output = Self>
    fn add(self, rhs: Rhs) -> Output
end

pub kind Sub<Rhs, Output = Self>
    fn sub(self, rhs: Rhs) -> Output
end

pub kind Mul<Rhs, Output = Self>
    fn mul(self, rhs: Rhs) -> Output
end

pub kind Div<Rhs, Output = Self>
    fn div(self, rhs: Rhs) -> Output
end

pub kind Rem<Rhs, Output = Self>
    fn rem(self, rhs: Rhs) -> Output
end

# Unary operators
pub kind Neg<Output = Self>
    fn neg(self) -> Output
end

# Bitwise operators
pub kind BitAnd<Rhs, Output = Self>
    fn bitand(self, rhs: Rhs) -> Output
end

pub kind BitOr<Rhs, Output = Self>
    fn bitor(self, rhs: Rhs) -> Output
end

pub kind BitXor<Rhs, Output = Self>
    fn bitxor(self, rhs: Rhs) -> Output
end

# Comparison operators
pub kind Eq<Rhs = Self>
    fn eq(self, rhs: Rhs) -> bool
end

pub kind NotEq<Rhs = Self>
    fn neq(self, rhs: Rhs) -> bool
end

pub kind Ord<Rhs = Self>
    fn cmp(self, rhs: Rhs) -> Ordering
end

pub kind Lt<Rhs = Self>
    fn lt(self, rhs: Rhs) -> bool
end

pub kind Gt<Rhs = Self>
    fn gt(self, rhs: Rhs) -> bool
end

pub kind Le<Rhs = Self>
    fn le(self, rhs: Rhs) -> bool
end

pub kind Ge<Rhs = Self>
    fn ge(self, rhs: Rhs) -> bool
end

# Indexing operators
pub kind Index<Idx, Output>
    fn index(self, idx: Idx) -> Output
end

pub kind IndexMut<Idx, Output>
    fn index_mut(self, idx: Idx) -> Output
end

pub kind SetIndex<Idx, Value>
    fn set_index(self, idx: Idx, val: Value) -> ()
end

# Helper enum for ordering
pub enum Ordering(Less, Equal, Greater)
